{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util/paint.js","webpack:///./src/util/physics.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","canvas","document","getElementsByTagName","ctx","getContext","paintCircles","circle_list","console","log","clearRect","width","height","forEach","pos","highlighted","beginPath","arc","x","y","Math","PI","fillStyle","fill","stroke","circle","attract","myPos","otherPos","myMass","otherMass","g","sqrt","pow","theta","atan","f","bodies","src_canvas","getMousePos","e","rect","getBoundingClientRect","clientX","left","clientY","top","addEventListener","push","addBody","delta","iterations","max_movement","iterateToEquilibrium","body_pos","index","other_body_pos","attraction","repulsion","deltax","deltay","old_pos","movement","abs","isNaN","max","window","requestAnimationFrame","getEquilibriumFunc"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\n\nvar canvas = document.getElementsByTagName(\"canvas\")[0];\nvar ctx = canvas.getContext('2d');\n\nexport function line (start, end) {\n    ctx.moveTo(start.x, start.y);\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke(); \n}; \n\nexport function circle (pos, r = 10, highlighted = false) {\n    ctx.beginPath();\n    ctx.arc(pos.x, pos.y, r, 0, 2 * Math.PI);\n\tif(highlighted){\n\t\tctx.fillStyle = \"orange\";\n\t}else{\n\t\tctx.fillStyle = \"white\";\n\t}\n\tctx.fill();\n    ctx.stroke(); \n}\n\nexport function paintCircles (circle_list) {\n\tconsole.log('painting circles...');\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\tcircle_list.forEach( pos => {\n\t\tcircle(pos);\n\t});\n};\n","export function attract(myPos, otherPos, myMass, otherMass, g) {\n\tconst x = myPos.x-otherPos.x;\n\tconst y = myPos.y-otherPos.y;\n\tconst r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n\tconst theta = Math.atan(y/x);\n\tconst f = g * myMass * otherMass / Math.pow(r,2);\n\treturn ({\n\t\tx,\n\t\ty,\n\t\tr,\n\t\ttheta,\n\t\tf\n\t});\n}\n","import {line, circle, paintCircles} from \"./util/paint.js\";\nimport {attract} from \"./util/physics.js\";\n\nlet bodies = [];\nconst canvas = document.getElementsByTagName(\"canvas\")[0];\n\n\nconst addBody = (e) => {\n\tlet pos = getMousePos(e);\n\tbodies.push({x:pos[0], y:pos[1]});\n};\n\nconst getMousePos = (e) => {\n\tlet rect = canvas.getBoundingClientRect();\n\treturn([e.clientX - rect.left, e.clientY - rect.top]);\n}\n\nconst getEquilibriumFunc = (delta=4, iterations = 30) => {\n\tlet max_movement = 0;\n\tconsole.log('iterations remaining: ', iterations);\n\t\n\tconst iterateToEquilibrium = () =>{\n\n\t\tif(iterations <= 0){\n\t\t\treturn false;\n\t\t};\n\n\t\tconsole.log('achieving equilibrium...');\n\t\tbodies.forEach( (body_pos, index) => {\n\t\t\t//potential for optimization: find radius at which f is sufficiently small and ignore everything outside that radius\n\t\t\tbodies.forEach( other_body_pos => {\n\t\t\t\tlet attraction = attract(body_pos, other_body_pos, 10, 10, 8.2);\n\t\t\t\tlet repulsion = attract(body_pos, other_body_pos, 2, 4, 130);\n\t\t\t\tconsole.log('attraction : ', attraction);\n\t\t\t\tconsole.log('repulsion : ', repulsion);\n\t\t\t\tlet deltax = attraction.x - repulsion.x;\n\t\t\t\tlet deltay = attraction.y - repulsion.y;\n\n\t\t\t\tconsole.log('dx, dy: ', deltax, deltay);\n\t\t\t\tbodies[index].old_pos = body_pos;\n\t\t\t\tbodies[index].x += (deltax);  \n\t\t\t\tbodies[index].y += (deltay);\n\n\t\t\t\t//this ^ used to be body_pos.x / y . if this fixes things you should take note/write about it\n\t\t\t\tlet movement = Math.abs(attraction.r * attraction.f - repulsion.r * repulsion.f);\n\t\t\t\tconsole.log('movement: ', movement);\n\t\t\t\tif(!isNaN(movement)){\n\t\t\t\t\tmax_movement = Math.max(movement, max_movement);  \n\t\t\t\t}\n\n\t\t\t});\n\t\t});\n\t\t\n\t\tconsole.log('max_movement: ', max_movement);\n\t\titerations -= 1;\n\t\tconsole.log('iterations remaining: ', iterations);\n\t\tpaintCircles(bodies);\n\t\tif((max_movement > delta) && (iterations > 0)){\n\t\t\twindow.requestAnimationFrame(iterateToEquilibrium);\n\t\t}else{\n\t\t\tconsole.log('finished attempting to reach eq');\n\t\t\tconsole.log(bodies);\n\t\t};\n\t};\n\n\treturn iterateToEquilibrium;\n};\n\ncanvas.addEventListener('click', e => {\n\taddBody(e);\n\tpaintCircles(bodies);\n\tconsole.log(bodies);\n\tgetEquilibriumFunc(4, 30)();\n});\n"],"sourceRoot":""}