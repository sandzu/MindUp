{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/dhotson-springy-9654b64/springy.js","webpack:///./src/util/paint.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","root","this","undefined","returnExportsGlobal","Springy","Graph","nodeSet","nodes","edges","adjacency","nextNodeId","nextEdgeId","eventListeners","Node","id","data","Edge","source","target","addNode","node","push","notify","addNodes","arguments","length","label","addEdge","edge","exists","forEach","e","addEdges","node1","TypeError","node2","attr","newEdge","newNode","loadJSON","json","String","JSON","parse","apply","getEdges","removeNode","splice","detachNode","tmpEdges","slice","removeEdge","x","y","j","isEmpty","merge","from","to","type","filterNodes","fn","tmpNodes","filterEdges","addGraphListener","obj","graphChanged","me","Layout","ForceDirected","graph","stiffness","repulsion","damping","minEnergyThreshold","maxSpeed","Infinity","nodePoints","edgeSprings","point","mass","Point","Vector","random","spring","existingSpring","Spring","point1","point2","eachNode","callback","eachEdge","eachSpring","applyCoulombsLaw","n1","n2","subtract","distance","magnitude","direction","normalise","applyForce","multiply","divide","applyHookesLaw","displacement","k","attractToCentre","updateVelocity","timestep","v","add","a","updatePosition","totalEnergy","energy","speed","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","element","setTimeout","start","render","onRenderStop","onRenderStart","_started","_stop","step","tick","stop","nearest","pos","min","getBoundingBox","bottomleft","topright","padding","Math","v2","sqrt","normal","position","force","Renderer","layout","clear","drawEdge","drawNode","onRenderFrame","done","Array","thisArg","T","O","len","toString","kValue","factory","canvas","document","getElementsByTagName","ctx","getContext","box","xmin","xmax","ymin","ymax","pos_relative","canvas_size","box_min","box_size","y_relative","height","boxHeight","x_relative","width","boxWidth","circle","highlighted","beginPath","arc","PI","fillStyle","fill","stroke","bodies","spruce","fir","fir2","fir3","fir4","console","log","renderer","clearRect","rect","p1","p2","end","moveTo","lineTo","max","txt","font","measureText","fillText","paint_text"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * Springy v2.7.1\n *\n * Copyright (c) 2010-2013 Dennis Hotson\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(function () {\n            return (root.returnExportsGlobal = factory());\n        });\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.Springy = factory();\n    }\n}(this, function() {\n\n\tvar Springy = {};\n\n\tvar Graph = Springy.Graph = function() {\n\t\tthis.nodeSet = {};\n\t\tthis.nodes = [];\n\t\tthis.edges = [];\n\t\tthis.adjacency = {};\n\n\t\tthis.nextNodeId = 0;\n\t\tthis.nextEdgeId = 0;\n\t\tthis.eventListeners = [];\n\t};\n\n\tvar Node = Springy.Node = function(id, data) {\n\t\tthis.id = id;\n\t\tthis.data = (data !== undefined) ? data : {};\n\n\t// Data fields used by layout algorithm in this file:\n\t// this.data.mass\n\t// Data used by default renderer in springyui.js\n\t// this.data.label\n\t};\n\n\tvar Edge = Springy.Edge = function(id, source, target, data) {\n\t\tthis.id = id;\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t\tthis.data = (data !== undefined) ? data : {};\n\n\t// Edge data field used by layout alorithm\n\t// this.data.length\n\t// this.data.type\n\t};\n\n\tGraph.prototype.addNode = function(node) {\n\t\tif (!(node.id in this.nodeSet)) {\n\t\t\tthis.nodes.push(node);\n\t\t}\n\n\t\tthis.nodeSet[node.id] = node;\n\n\t\tthis.notify();\n\t\treturn node;\n\t};\n\n\tGraph.prototype.addNodes = function() {\n\t\t// accepts variable number of arguments, where each argument\n\t\t// is a string that becomes both node identifier and label\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar name = arguments[i];\n\t\t\tvar node = new Node(name, {label:name});\n\t\t\tthis.addNode(node);\n\t\t}\n\t};\n\n\tGraph.prototype.addEdge = function(edge) {\n\t\tvar exists = false;\n\t\tthis.edges.forEach(function(e) {\n\t\t\tif (edge.id === e.id) { exists = true; }\n\t\t});\n\n\t\tif (!exists) {\n\t\t\tthis.edges.push(edge);\n\t\t}\n\n\t\tif (!(edge.source.id in this.adjacency)) {\n\t\t\tthis.adjacency[edge.source.id] = {};\n\t\t}\n\t\tif (!(edge.target.id in this.adjacency[edge.source.id])) {\n\t\t\tthis.adjacency[edge.source.id][edge.target.id] = [];\n\t\t}\n\n\t\texists = false;\n\t\tthis.adjacency[edge.source.id][edge.target.id].forEach(function(e) {\n\t\t\t\tif (edge.id === e.id) { exists = true; }\n\t\t});\n\n\t\tif (!exists) {\n\t\t\tthis.adjacency[edge.source.id][edge.target.id].push(edge);\n\t\t}\n\n\t\tthis.notify();\n\t\treturn edge;\n\t};\n\n\tGraph.prototype.addEdges = function() {\n\t\t// accepts variable number of arguments, where each argument\n\t\t// is a triple [nodeid1, nodeid2, attributes]\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar e = arguments[i];\n\t\t\tvar node1 = this.nodeSet[e[0]];\n\t\t\tif (node1 == undefined) {\n\t\t\t\tthrow new TypeError(\"invalid node name: \" + e[0]);\n\t\t\t}\n\t\t\tvar node2 = this.nodeSet[e[1]];\n\t\t\tif (node2 == undefined) {\n\t\t\t\tthrow new TypeError(\"invalid node name: \" + e[1]);\n\t\t\t}\n\t\t\tvar attr = e[2];\n\n\t\t\tthis.newEdge(node1, node2, attr);\n\t\t}\n\t};\n\n\tGraph.prototype.newNode = function(data) {\n\t\tvar node = new Node(this.nextNodeId++, data);\n\t\tthis.addNode(node);\n\t\treturn node;\n\t};\n\n\tGraph.prototype.newEdge = function(source, target, data) {\n\t\tvar edge = new Edge(this.nextEdgeId++, source, target, data);\n\t\tthis.addEdge(edge);\n\t\treturn edge;\n\t};\n\n\n\t// add nodes and edges from JSON object\n\tGraph.prototype.loadJSON = function(json) {\n\t/**\n\tSpringy's simple JSON format for graphs.\n\n\thistorically, Springy uses separate lists\n\tof nodes and edges:\n\n\t\t{\n\t\t\t\"nodes\": [\n\t\t\t\t\"center\",\n\t\t\t\t\"left\",\n\t\t\t\t\"right\",\n\t\t\t\t\"up\",\n\t\t\t\t\"satellite\"\n\t\t\t],\n\t\t\t\"edges\": [\n\t\t\t\t[\"center\", \"left\"],\n\t\t\t\t[\"center\", \"right\"],\n\t\t\t\t[\"center\", \"up\"]\n\t\t\t]\n\t\t}\n\n\t**/\n\t\t// parse if a string is passed (EC5+ browsers)\n\t\tif (typeof json == 'string' || json instanceof String) {\n\t\t\tjson = JSON.parse( json );\n\t\t}\n\n\t\tif ('nodes' in json || 'edges' in json) {\n\t\t\tthis.addNodes.apply(this, json['nodes']);\n\t\t\tthis.addEdges.apply(this, json['edges']);\n\t\t}\n\t}\n\n\n\t// find the edges from node1 to node2\n\tGraph.prototype.getEdges = function(node1, node2) {\n\t\tif (node1.id in this.adjacency\n\t\t\t&& node2.id in this.adjacency[node1.id]) {\n\t\t\treturn this.adjacency[node1.id][node2.id];\n\t\t}\n\n\t\treturn [];\n\t};\n\n\t// remove a node and it's associated edges from the graph\n\tGraph.prototype.removeNode = function(node) {\n\t\tif (node.id in this.nodeSet) {\n\t\t\tdelete this.nodeSet[node.id];\n\t\t}\n\n\t\tfor (var i = this.nodes.length - 1; i >= 0; i--) {\n\t\t\tif (this.nodes[i].id === node.id) {\n\t\t\t\tthis.nodes.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\tthis.detachNode(node);\n\t};\n\n\t// removes edges associated with a given node\n\tGraph.prototype.detachNode = function(node) {\n\t\tvar tmpEdges = this.edges.slice();\n\t\ttmpEdges.forEach(function(e) {\n\t\t\tif (e.source.id === node.id || e.target.id === node.id) {\n\t\t\t\tthis.removeEdge(e);\n\t\t\t}\n\t\t}, this);\n\n\t\tthis.notify();\n\t};\n\n\t// remove a node and it's associated edges from the graph\n\tGraph.prototype.removeEdge = function(edge) {\n\t\tfor (var i = this.edges.length - 1; i >= 0; i--) {\n\t\t\tif (this.edges[i].id === edge.id) {\n\t\t\t\tthis.edges.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\tfor (var x in this.adjacency) {\n\t\t\tfor (var y in this.adjacency[x]) {\n\t\t\t\tvar edges = this.adjacency[x][y];\n\n\t\t\t\tfor (var j=edges.length - 1; j>=0; j--) {\n\t\t\t\t\tif (this.adjacency[x][y][j].id === edge.id) {\n\t\t\t\t\t\tthis.adjacency[x][y].splice(j, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Clean up empty edge arrays\n\t\t\t\tif (this.adjacency[x][y].length == 0) {\n\t\t\t\t\tdelete this.adjacency[x][y];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clean up empty objects\n\t\t\tif (isEmpty(this.adjacency[x])) {\n\t\t\t\tdelete this.adjacency[x];\n\t\t\t}\n\t\t}\n\n\t\tthis.notify();\n\t};\n\n\t/* Merge a list of nodes and edges into the current graph. eg.\n\tvar o = {\n\t\tnodes: [\n\t\t\t{id: 123, data: {type: 'user', userid: 123, displayname: 'aaa'}},\n\t\t\t{id: 234, data: {type: 'user', userid: 234, displayname: 'bbb'}}\n\t\t],\n\t\tedges: [\n\t\t\t{from: 0, to: 1, type: 'submitted_design', directed: true, data: {weight: }}\n\t\t]\n\t}\n\t*/\n\tGraph.prototype.merge = function(data) {\n\t\tvar nodes = [];\n\t\tdata.nodes.forEach(function(n) {\n\t\t\tnodes.push(this.addNode(new Node(n.id, n.data)));\n\t\t}, this);\n\n\t\tdata.edges.forEach(function(e) {\n\t\t\tvar from = nodes[e.from];\n\t\t\tvar to = nodes[e.to];\n\n\t\t\tvar id = (e.directed)\n\t\t\t\t? (id = e.type + \"-\" + from.id + \"-\" + to.id)\n\t\t\t\t: (from.id < to.id) // normalise id for non-directed edges\n\t\t\t\t\t? e.type + \"-\" + from.id + \"-\" + to.id\n\t\t\t\t\t: e.type + \"-\" + to.id + \"-\" + from.id;\n\n\t\t\tvar edge = this.addEdge(new Edge(id, from, to, e.data));\n\t\t\tedge.data.type = e.type;\n\t\t}, this);\n\t};\n\n\tGraph.prototype.filterNodes = function(fn) {\n\t\tvar tmpNodes = this.nodes.slice();\n\t\ttmpNodes.forEach(function(n) {\n\t\t\tif (!fn(n)) {\n\t\t\t\tthis.removeNode(n);\n\t\t\t}\n\t\t}, this);\n\t};\n\n\tGraph.prototype.filterEdges = function(fn) {\n\t\tvar tmpEdges = this.edges.slice();\n\t\ttmpEdges.forEach(function(e) {\n\t\t\tif (!fn(e)) {\n\t\t\t\tthis.removeEdge(e);\n\t\t\t}\n\t\t}, this);\n\t};\n\n\n\tGraph.prototype.addGraphListener = function(obj) {\n\t\tthis.eventListeners.push(obj);\n\t};\n\n\tGraph.prototype.notify = function() {\n\t\tthis.eventListeners.forEach(function(obj){\n\t\t\tobj.graphChanged();\n\t\t});\n\t};\n\n\t// -----------\n\tvar Layout = Springy.Layout = {};\n\tLayout.ForceDirected = function(graph, stiffness, repulsion, damping, minEnergyThreshold, maxSpeed) {\n\t\tthis.graph = graph;\n\t\tthis.stiffness = stiffness; // spring stiffness constant\n\t\tthis.repulsion = repulsion; // repulsion constant\n\t\tthis.damping = damping; // velocity damping factor\n\t\tthis.minEnergyThreshold = minEnergyThreshold || 0.01; //threshold used to determine render stop\n\t\tthis.maxSpeed = maxSpeed || Infinity; // nodes aren't allowed to exceed this speed\n\n\t\tthis.nodePoints = {}; // keep track of points associated with nodes\n\t\tthis.edgeSprings = {}; // keep track of springs associated with edges\n\t};\n\n\tLayout.ForceDirected.prototype.point = function(node) {\n\t\tif (!(node.id in this.nodePoints)) {\n\t\t\tvar mass = (node.data.mass !== undefined) ? node.data.mass : 1.0;\n\t\t\tthis.nodePoints[node.id] = new Layout.ForceDirected.Point(Vector.random(), mass);\n\t\t}\n\n\t\treturn this.nodePoints[node.id];\n\t};\n\n\tLayout.ForceDirected.prototype.spring = function(edge) {\n\t\tif (!(edge.id in this.edgeSprings)) {\n\t\t\tvar length = (edge.data.length !== undefined) ? edge.data.length : 1.0;\n\n\t\t\tvar existingSpring = false;\n\n\t\t\tvar from = this.graph.getEdges(edge.source, edge.target);\n\t\t\tfrom.forEach(function(e) {\n\t\t\t\tif (existingSpring === false && e.id in this.edgeSprings) {\n\t\t\t\t\texistingSpring = this.edgeSprings[e.id];\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tif (existingSpring !== false) {\n\t\t\t\treturn new Layout.ForceDirected.Spring(existingSpring.point1, existingSpring.point2, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tvar to = this.graph.getEdges(edge.target, edge.source);\n\t\t\tfrom.forEach(function(e){\n\t\t\t\tif (existingSpring === false && e.id in this.edgeSprings) {\n\t\t\t\t\texistingSpring = this.edgeSprings[e.id];\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tif (existingSpring !== false) {\n\t\t\t\treturn new Layout.ForceDirected.Spring(existingSpring.point2, existingSpring.point1, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tthis.edgeSprings[edge.id] = new Layout.ForceDirected.Spring(\n\t\t\t\tthis.point(edge.source), this.point(edge.target), length, this.stiffness\n\t\t\t);\n\t\t}\n\n\t\treturn this.edgeSprings[edge.id];\n\t};\n\n\t// callback should accept two arguments: Node, Point\n\tLayout.ForceDirected.prototype.eachNode = function(callback) {\n\t\tvar t = this;\n\t\tthis.graph.nodes.forEach(function(n){\n\t\t\tcallback.call(t, n, t.point(n));\n\t\t});\n\t};\n\n\t// callback should accept two arguments: Edge, Spring\n\tLayout.ForceDirected.prototype.eachEdge = function(callback) {\n\t\tvar t = this;\n\t\tthis.graph.edges.forEach(function(e){\n\t\t\tcallback.call(t, e, t.spring(e));\n\t\t});\n\t};\n\n\t// callback should accept one argument: Spring\n\tLayout.ForceDirected.prototype.eachSpring = function(callback) {\n\t\tvar t = this;\n\t\tthis.graph.edges.forEach(function(e){\n\t\t\tcallback.call(t, t.spring(e));\n\t\t});\n\t};\n\n\n\t// Physics stuff\n\tLayout.ForceDirected.prototype.applyCoulombsLaw = function() {\n\t\tthis.eachNode(function(n1, point1) {\n\t\t\tthis.eachNode(function(n2, point2) {\n\t\t\t\tif (point1 !== point2)\n\t\t\t\t{\n\t\t\t\t\tvar d = point1.p.subtract(point2.p);\n\t\t\t\t\tvar distance = d.magnitude() + 0.1; // avoid massive forces at small distances (and divide by zero)\n\t\t\t\t\tvar direction = d.normalise();\n\n\t\t\t\t\t// apply force to each end point\n\t\t\t\t\tpoint1.applyForce(direction.multiply(this.repulsion).divide(distance * distance * 0.5));\n\t\t\t\t\tpoint2.applyForce(direction.multiply(this.repulsion).divide(distance * distance * -0.5));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\n\tLayout.ForceDirected.prototype.applyHookesLaw = function() {\n\t\tthis.eachSpring(function(spring){\n\t\t\tvar d = spring.point2.p.subtract(spring.point1.p); // the direction of the spring\n\t\t\tvar displacement = spring.length - d.magnitude();\n\t\t\tvar direction = d.normalise();\n\n\t\t\t// apply force to each end point\n\t\t\tspring.point1.applyForce(direction.multiply(spring.k * displacement * -0.5));\n\t\t\tspring.point2.applyForce(direction.multiply(spring.k * displacement * 0.5));\n\t\t});\n\t};\n\n\tLayout.ForceDirected.prototype.attractToCentre = function() {\n\t\tthis.eachNode(function(node, point) {\n\t\t\tvar direction = point.p.multiply(-1.0);\n\t\t\tpoint.applyForce(direction.multiply(this.repulsion / 50.0));\n\t\t});\n\t};\n\n\n\tLayout.ForceDirected.prototype.updateVelocity = function(timestep) {\n\t\tthis.eachNode(function(node, point) {\n\t\t\t// Is this, along with updatePosition below, the only places that your\n\t\t\t// integration code exist?\n\t\t\tpoint.v = point.v.add(point.a.multiply(timestep)).multiply(this.damping);\n\t\t\tif (point.v.magnitude() > this.maxSpeed) {\n\t\t\t    point.v = point.v.normalise().multiply(this.maxSpeed);\n\t\t\t}\n\t\t\tpoint.a = new Vector(0,0);\n\t\t});\n\t};\n\n\tLayout.ForceDirected.prototype.updatePosition = function(timestep) {\n\t\tthis.eachNode(function(node, point) {\n\t\t\t// Same question as above; along with updateVelocity, is this all of\n\t\t\t// your integration code?\n\t\t\tpoint.p = point.p.add(point.v.multiply(timestep));\n\t\t});\n\t};\n\n\t// Calculate the total kinetic energy of the system\n\tLayout.ForceDirected.prototype.totalEnergy = function(timestep) {\n\t\tvar energy = 0.0;\n\t\tthis.eachNode(function(node, point) {\n\t\t\tvar speed = point.v.magnitude();\n\t\t\tenergy += 0.5 * point.m * speed * speed;\n\t\t});\n\n\t\treturn energy;\n\t};\n\n\tvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }; // stolen from coffeescript, thanks jashkenas! ;-)\n\n\tSpringy.requestAnimationFrame = __bind(this.requestAnimationFrame ||\n\t\tthis.webkitRequestAnimationFrame ||\n\t\tthis.mozRequestAnimationFrame ||\n\t\tthis.oRequestAnimationFrame ||\n\t\tthis.msRequestAnimationFrame ||\n\t\t(function(callback, element) {\n\t\t\tthis.setTimeout(callback, 10);\n\t\t}), this);\n\n\n\t/**\n\t * Start simulation if it's not running already.\n\t * In case it's running then the call is ignored, and none of the callbacks passed is ever executed.\n\t */\n\tLayout.ForceDirected.prototype.start = function(render, onRenderStop, onRenderStart) {\n\t\tvar t = this;\n\n\t\tif (this._started) return;\n\t\tthis._started = true;\n\t\tthis._stop = false;\n\n\t\tif (onRenderStart !== undefined) { onRenderStart(); }\n\n\t\tSpringy.requestAnimationFrame(function step() {\n\t\t\tt.tick(0.03);\n\n\t\t\tif (render !== undefined) {\n\t\t\t\trender();\n\t\t\t}\n\n\t\t\t// stop simulation when energy of the system goes below a threshold\n\t\t\tif (t._stop || t.totalEnergy() < t.minEnergyThreshold) {\n\t\t\t\tt._started = false;\n\t\t\t\tif (onRenderStop !== undefined) { onRenderStop(); }\n\t\t\t} else {\n\t\t\t\tSpringy.requestAnimationFrame(step);\n\t\t\t}\n\t\t});\n\t};\n\n\tLayout.ForceDirected.prototype.stop = function() {\n\t\tthis._stop = true;\n\t}\n\n\tLayout.ForceDirected.prototype.tick = function(timestep) {\n\t\tthis.applyCoulombsLaw();\n\t\tthis.applyHookesLaw();\n\t\tthis.attractToCentre();\n\t\tthis.updateVelocity(timestep);\n\t\tthis.updatePosition(timestep);\n\t};\n\n\t// Find the nearest point to a particular position\n\tLayout.ForceDirected.prototype.nearest = function(pos) {\n\t\tvar min = {node: null, point: null, distance: null};\n\t\tvar t = this;\n\t\tthis.graph.nodes.forEach(function(n){\n\t\t\tvar point = t.point(n);\n\t\t\tvar distance = point.p.subtract(pos).magnitude();\n\n\t\t\tif (min.distance === null || distance < min.distance) {\n\t\t\t\tmin = {node: n, point: point, distance: distance};\n\t\t\t}\n\t\t});\n\n\t\treturn min;\n\t};\n\n\t// returns [bottomleft, topright]\n\tLayout.ForceDirected.prototype.getBoundingBox = function() {\n\t\tvar bottomleft = new Vector(-2,-2);\n\t\tvar topright = new Vector(2,2);\n\n\t\tthis.eachNode(function(n, point) {\n\t\t\tif (point.p.x < bottomleft.x) {\n\t\t\t\tbottomleft.x = point.p.x;\n\t\t\t}\n\t\t\tif (point.p.y < bottomleft.y) {\n\t\t\t\tbottomleft.y = point.p.y;\n\t\t\t}\n\t\t\tif (point.p.x > topright.x) {\n\t\t\t\ttopright.x = point.p.x;\n\t\t\t}\n\t\t\tif (point.p.y > topright.y) {\n\t\t\t\ttopright.y = point.p.y;\n\t\t\t}\n\t\t});\n\n\t\tvar padding = topright.subtract(bottomleft).multiply(0.07); // ~5% padding\n\n\t\treturn {bottomleft: bottomleft.subtract(padding), topright: topright.add(padding)};\n\t};\n\n\n\t// Vector\n\tvar Vector = Springy.Vector = function(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t};\n\n\tVector.random = function() {\n\t\treturn new Vector(10.0 * (Math.random() - 0.5), 10.0 * (Math.random() - 0.5));\n\t};\n\n\tVector.prototype.add = function(v2) {\n\t\treturn new Vector(this.x + v2.x, this.y + v2.y);\n\t};\n\n\tVector.prototype.subtract = function(v2) {\n\t\treturn new Vector(this.x - v2.x, this.y - v2.y);\n\t};\n\n\tVector.prototype.multiply = function(n) {\n\t\treturn new Vector(this.x * n, this.y * n);\n\t};\n\n\tVector.prototype.divide = function(n) {\n\t\treturn new Vector((this.x / n) || 0, (this.y / n) || 0); // Avoid divide by zero errors..\n\t};\n\n\tVector.prototype.magnitude = function() {\n\t\treturn Math.sqrt(this.x*this.x + this.y*this.y);\n\t};\n\n\tVector.prototype.normal = function() {\n\t\treturn new Vector(-this.y, this.x);\n\t};\n\n\tVector.prototype.normalise = function() {\n\t\treturn this.divide(this.magnitude());\n\t};\n\n\t// Point\n\tLayout.ForceDirected.Point = function(position, mass) {\n\t\tthis.p = position; // position\n\t\tthis.m = mass; // mass\n\t\tthis.v = new Vector(0, 0); // velocity\n\t\tthis.a = new Vector(0, 0); // acceleration\n\t};\n\n\tLayout.ForceDirected.Point.prototype.applyForce = function(force) {\n\t\tthis.a = this.a.add(force.divide(this.m));\n\t};\n\n\t// Spring\n\tLayout.ForceDirected.Spring = function(point1, point2, length, k) {\n\t\tthis.point1 = point1;\n\t\tthis.point2 = point2;\n\t\tthis.length = length; // spring length at rest\n\t\tthis.k = k; // spring constant (See Hooke's law) .. how stiff the spring is\n\t};\n\n\t// Layout.ForceDirected.Spring.prototype.distanceToPoint = function(point)\n\t// {\n\t// \t// hardcore vector arithmetic.. ohh yeah!\n\t// \t// .. see http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment/865080#865080\n\t// \tvar n = this.point2.p.subtract(this.point1.p).normalise().normal();\n\t// \tvar ac = point.p.subtract(this.point1.p);\n\t// \treturn Math.abs(ac.x * n.x + ac.y * n.y);\n\t// };\n\n\t/**\n\t * Renderer handles the layout rendering loop\n\t * @param onRenderStop optional callback function that gets executed whenever rendering stops.\n\t * @param onRenderStart optional callback function that gets executed whenever rendering starts.\n\t * @param onRenderFrame optional callback function that gets executed after each frame is rendered.\n\t */\n\tvar Renderer = Springy.Renderer = function(layout, clear, drawEdge, drawNode, onRenderStop, onRenderStart, onRenderFrame) {\n\t\tthis.layout = layout;\n\t\tthis.clear = clear;\n\t\tthis.drawEdge = drawEdge;\n\t\tthis.drawNode = drawNode;\n\t\tthis.onRenderStop = onRenderStop;\n\t\tthis.onRenderStart = onRenderStart;\n\t\tthis.onRenderFrame = onRenderFrame;\n\n\t\tthis.layout.graph.addGraphListener(this);\n\t}\n\n\tRenderer.prototype.graphChanged = function(e) {\n\t\tthis.start();\n\t};\n\n\t/**\n\t * Starts the simulation of the layout in use.\n\t *\n\t * Note that in case the algorithm is still or already running then the layout that's in use\n\t * might silently ignore the call, and your optional <code>done</code> callback is never executed.\n\t * At least the built-in ForceDirected layout behaves in this way.\n\t *\n\t * @param done An optional callback function that gets executed when the springy algorithm stops,\n\t * either because it ended or because stop() was called.\n\t */\n\tRenderer.prototype.start = function(done) {\n\t\tvar t = this;\n\t\tthis.layout.start(function render() {\n\t\t\tt.clear();\n\n\t\t\tt.layout.eachEdge(function(edge, spring) {\n\t\t\t\tt.drawEdge(edge, spring.point1.p, spring.point2.p);\n\t\t\t});\n\n\t\t\tt.layout.eachNode(function(node, point) {\n\t\t\t\tt.drawNode(node, point.p);\n\t\t\t});\n\t\t\t\n\t\t\tif (t.onRenderFrame !== undefined) { t.onRenderFrame(); }\n\t\t}, this.onRenderStop, this.onRenderStart);\n\t};\n\n\tRenderer.prototype.stop = function() {\n\t\tthis.layout.stop();\n\t};\n\n\t// Array.forEach implementation for IE support..\n\t//https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach\n\tif ( !Array.prototype.forEach ) {\n\t\tArray.prototype.forEach = function( callback, thisArg ) {\n\t\t\tvar T, k;\n\t\t\tif ( this == null ) {\n\t\t\t\tthrow new TypeError( \" this is null or not defined\" );\n\t\t\t}\n\t\t\tvar O = Object(this);\n\t\t\tvar len = O.length >>> 0; // Hack to convert O.length to a UInt32\n\t\t\tif ( {}.toString.call(callback) != \"[object Function]\" ) {\n\t\t\t\tthrow new TypeError( callback + \" is not a function\" );\n\t\t\t}\n\t\t\tif ( thisArg ) {\n\t\t\t\tT = thisArg;\n\t\t\t}\n\t\t\tk = 0;\n\t\t\twhile( k < len ) {\n\t\t\t\tvar kValue;\n\t\t\t\tif ( k in O ) {\n\t\t\t\t\tkValue = O[ k ];\n\t\t\t\t\tcallback.call( T, kValue, k, O );\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t};\n\t}\n\n\tvar isEmpty = function(obj) {\n\t\tfor (var k in obj) {\n\t\t\tif (obj.hasOwnProperty(k)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\n  return Springy;\n}));\n","\n\nvar canvas = document.getElementsByTagName(\"canvas\")[0];\nvar ctx = canvas.getContext('2d');\n\nexport function line (start, end) {\n    ctx.moveTo(x_relative(start.x), y_relative(start.y));\n    ctx.lineTo(x_relative(end.x), y_relative(end.y));\n    ctx.stroke(); \n}; \n\nexport function text (txt, pos) {\n\tctx.font = '11px serif';\n\tctx.fillStyle = 'black';\n\tconsole.log(ctx.measureText(txt).width)\n\tctx.fillText(txt, x_relative(pos.x) - ctx.measureText(txt).width * 0.5, y_relative(pos.y));\n}\n\nconst box = {\n\txmin: 0,\n\txmax: 0,\n\tymin: 0,\n\tymax: 0\n};\n\nconst boxWidth = () => {\n\treturn(box.xmax - box.xmin);\n};\n\nconst boxHeight = () => {\n\treturn(box.ymax - box.ymin);\n};\n\nconst pos_relative = (pos, canvas_size, box_min, box_size) => {\n\t// console.log(box_size)\n\treturn( 1.0 * canvas_size * (pos - box_min) / box_size);\n}\n\nconst y_relative = y => pos_relative(y, canvas.height, box.ymin, boxHeight());\nconst x_relative = x => pos_relative(x, canvas.width, box.xmin, boxWidth());\n\nexport const update_bounding_box = pos => {\n\tbox.xmin = Math.min(pos.x, box.xmin);\n\tbox.xmax = Math.max(pos.x, box.xmax);\n\tbox.ymin = Math.min(pos.y, box.ymin);\n\tbox.ymax = Math.max(pos.y, box.ymax);\n};\n\n\n\n\n\n\nexport function circle (pos, r = 10, highlighted = false) {\n\tctx.beginPath();\n\t// console.log(x_relative(pos.x), y_relative(pos.y)); // +- infty -+ infty\n    ctx.arc(x_relative(pos.x), y_relative(pos.y), r, 0, 2 * Math.PI);\n\tif(highlighted){\n\t\tctx.fillStyle = \"orange\";\n\t}else{\n\t\tctx.fillStyle = \"white\";\n\t}\n\tctx.fill();\n    ctx.stroke(); \n}\n\nexport function paintCircles (circle_list) {\n\t// console.log('painting circles...');\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\tcircle_list.forEach( pos => {\n\t\tcircle(pos);\n\t});\n};\n\nexport function clear() {\n\tctx.fillStyle = 'grey';\n\n\tctx.clearRect(0,0, canvas.width, canvas.height);\n\tctx.rect(0,0, canvas.width, canvas.height);\n}\n","import {text, line, circle, paintCircles, clear, update_bounding_box} from \"./util/paint.js\";\nimport {attract} from \"./util/physics.js\";\nconst Springy = require(\"./dhotson-springy-9654b64/springy.js\");\n\nlet bodies = [];\nconst canvas = document.getElementsByTagName(\"canvas\")[0];\n\nvar graph = new Springy.Graph();\n\n// make some nodes\nvar spruce = graph.newNode({ label: 'Norway Spruce' });\nvar fir = graph.newNode({ label: 'Sicilian Fir' });\nvar fir2 = graph.newNode({ label: 'Sicilian Fir2' });\nvar fir3 = graph.newNode({ label: 'Sicilian Fir3' });\nvar fir4 = graph.newNode({ label: 'Sicilian Fir4' });\n\n// connect them with an edge\ngraph.newEdge(spruce, fir);\ngraph.newEdge(fir, fir);\ngraph.newEdge(fir2, fir);\ngraph.newEdge(fir3, fir);\ngraph.newEdge(fir4, fir);\ngraph.newEdge(fir2, fir3);\ngraph.newEdge(fir4, fir2);\nconsole.log(fir);\nbodies = [spruce, fir, fir2, fir3, fir4]\n\nvar layout = new Springy.Layout.ForceDirected(\n\tgraph,\n\t400.0, // Spring stiffness\n\t400.0, // Node repulsion\n\t0.5 // Damping\n);\n\n\nvar renderer = new Springy.Renderer(\n\tlayout,\n\tfunction clear() {\n\t\tclear();\n\t},\n\tfunction drawEdge(edge, p1, p2) {\n\t\tline(p1, p2);\n\t},\n\tfunction drawNode(node, p) {\n\t\tupdate_bounding_box(p);\n\t\tcircle(p);\n\t\t// console.log(node)\n\t\ttext(node.data.label, p);\n\t}\n);\n\t\nconst addBody = (e) => {\n\tlet pos = getMousePos(e);\n\tbodies.push({x:pos[0], y:pos[1]});\n};\n\nconst getMousePos = (e) => {\n\tlet rect = canvas.getBoundingClientRect();\n\treturn([e.clientX - rect.left, e.clientY - rect.top]);\n}\n\n\n// canvas.addEventListener('click', e => {\n// \taddBody(e);\n// \tpaintCircles(bodies);\n// \tconsole.log(bodies);\n// \tgetEquilibriumFunc(4, 30)();\n// });\n\nrenderer.start();"],"sourceRoot":""}